input AMPLIFY {
  engine: String = "postgres"
}

type LeadershipSkills @model @auth(rules: [{ allow: public }]) {
  uuid: ID! @primaryKey
  brawl: Boolean
  commander: Boolean
  oathbreaker: Boolean
  card: Card @belongsTo(fields: ["uuid"])
}

type Legalities @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  alchemy: String
  brawl: String
  commander: String
  duel: String
  explorer: String
  future: String
  gladiator: String
  historic: String
  historicbrawl: String
  legacy: String
  modern: String
  oathbreaker: String
  oldschool: String
  pauper: String
  paupercommander: String
  penny: String
  pioneer: String
  predh: String
  premodern: String
  standard: String
  vintage: String
  cardUuid: ID! @index(name: "byCard")
  card: Card @belongsTo(fields: ["cardUuid"])
}

type PurchaseUrls @model @auth(rules: [{ allow: public }]) {
  # URL to purchase a product on Card Kingdom
  cardKingdom: String

  # URL to purchase a foil product on Card Kingdom
  cardKingdomFoil: String

  # URL to purchase a product on Cardmarket
  cardmarket: String

  # URL to purchase a product on TCG Player
  tcgplayer: String
}

type SourceProducts @model @auth(rules: [{ allow: public }]) {
  foil: [String]
  nonfoil: [String]
}

type Card @model @searchable @auth(rules: [{ allow: public }]) {
  # A universal unique ID (v5) generated by MTGJSON. Each entry is unique
  uuid: ID! @primaryKey

  # Name of the artist that illustrated the card art
  artist: String

  # The ASCII (Basic/128) code formatted card name with no special unicode characters
  asciiName: String

  # List of the card's available printing types
  availability: [String!]

  # Color of the card border
  borderColor: String

  # List of the colors found in manaCost, colorIndicator, and text
  colorIdentity: [String!]

  # List of all the colors in the color indicator (The symbol prefixed to a card's types)
  colorIndicator: [String!]

  # List of all colors in manaCost, colorIndicator. Some cards may not have a value, such as cards with 'Devoid' in its text
  colors: [String!]

  # The converted mana cost of the card
  convertedManaCost: Float

  # How many of this card exists in a relevant deck
  count: Float

  # An indicator for which duel deck the card is in
  duelDeck: String

  # Card rank on EDHRec
  edhrecRank: Float

  # The converted mana cost of the face of either half or part of the card
  faceConvertedManaCost: Float

  # Name on the face of the card
  faceName: String

  # Promotional card name printed above the true card name on special cards that has no game function
  flavorName: String

  # Italicized text found below the rules text that has no game function
  flavorText: String

  # The visual frame effect
  frameEffects: [String!]

  # Version of the card frame style
  frameVersion: String

  # Starting maximum hand size total modifier. A plus or minus character proceeds an integer
  hand: String

  # If the card marked by Wizards of the Coast for having sensitive content. Cards with this property may have missing or degraded properties and values
  hasContentWarning: Boolean

  # If the card be found in foil
  hasFoil: Boolean

  # If the card allows a value other than 4 copies in a deck
  hasAlternativeDeckLimit: Boolean

  # If the card can be found in non-foil
  hasNonFoil: Boolean

  # The card has some kind of alternative variation to its printed counterpart
  isAlternative: Boolean

  # If the card is in foil
  isFoil: Boolean

  # If the card has full artwork
  isFullArt: Boolean

  # If the card is only available in Magic: The Gathering Online
  isOnlineOnly: Boolean

  # If the card is oversized
  isOversized: Boolean

  # If the card is promotional
  isPromo: Boolean

  # If the card has been reprinted
  isReprint: Boolean

  # If the card is on the Magic: The Gathering Reserved List
  isReserved: Boolean

  # If the card is found in a booster pack
  isStarter: Boolean

  # If the card has a story spotlight
  isStorySpotlight: Boolean

  # If the card does not have a text box
  isTextless: Boolean

  # If this card is 'timeshifted', a feature from Time Spiral block
  isTimeshifted: Boolean

  # All keywords found on a card
  keywords: [String!]

  # Type of card layout
  layout: String

  # Starting life total modifier. A plus or minus character preceeds an integer. Used only on Vanguard cards
  life: String

  # Planeswalker loyalty value
  loyalty: String

  # Mana cost of the card
  manaCost: String

  # Names of each face on the card. Card with multiple faces, like 'Split' and 'Meld' cards are given as delimiter. Example: Face 1 Name // Face 2 Name
  name: String!

  # Number of the card. Can be prefixed or suffixed with a * or other characters for promo sets
  number: String

  # Text on the card as originally printed
  originalText: String

  # Type as originally printed. Includes any supertypes and subtypes
  originalType: String

  # List of UUID's of this card with counterparts, such as transformed or melded faces
  otherFaceIds: [String!]

  # Power of the card
  power: String

  # List of sets the card was printed in, in uppercase
  printings: [String!]

  # List of promotional types for a card
  promoTypes: [String!]

  # Card printing rarity
  rarity: String

  # The set code that the card is from
  setCode: ID! @index(name: "bySetCode")

  # Identifier of the card side. Used on cards with multiple faces
  side: String

  # List of card subtypes found after em-dash
  subTypes: [String!]

  # List of card supertypes found before em-dash
  superTypes: [String!]

  # Rules text of the card
  text: String

  # Toughness of the card
  toughness: String

  # Type of the card as visible, including any supertypes and subtypes
  type: String

  # List of all 'card types' of the card, including Un-sets and gameplay variants
  types: [String!]

  # List of UUID's of this card with alternate printings in the same set. Excludes Un-sets
  variations: [String!]

  # Name of the watermark on the card
  watermark: String

  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  cardsOwned: [CardsOwned] @hasMany(indexName: "byCard", fields: ["uuid"])
  identifier: Identifier @hasOne(fields: ["uuid"])
  foreignData: ForeignData @hasOne(fields: ["uuid"])
  leadershipSkills: LeadershipSkills @hasOne(fields: ["uuid"])
  legalities: Legalities @hasOne(fields: ["uuid"])
  purchaseUrls: PurchaseUrls @hasOne(fields: ["uuid"])
  rulings: [Rulings] @hasMany(indexName: "byCard", fields: ["uuid"])
  set: Set @belongsTo(fields: ["setCode"])
}

enum CardCondition {
  NEAR_MINT
  LIGHTLY_PLAYED
  MODERATELY_PLAYED
  HEAVILY_PLAYED
  DAMAGED
}

type ForeignData @model @auth(rules: [{ allow: public }]) {
  uuid: ID! @primaryKey
  # Name on the face of the card
  faceName: String

  # Flavor text in foreign language
  flavorText: String

  # Foreign language of card
  language: String!

  # Multiverse ID of the card
  multiverseId: String

  # Name of the card in foreign language
  name: String

  # Text ruling of the card in foreign language
  text: String

  # Type of the card. Includes any supertypes and subtypes
  type: String
}

type Identifier @model @auth(rules: [{ allow: public }]) {
  uuid: ID! @primaryKey
  # The Card Kingdom card foil ID
  cardKingdomFoilId: String

  # The Card Kingdom card ID
  cardKingdomId: String

  # The Card Market card ID
  mcmId: String

  # The Card Market card meta ID
  mcmMetaId: String

  # The Magic: The Gathering Arena card ID
  mtgArenaId: String

  # The Magic: The Gathering Online card foil ID
  mtgoFoilId: String

  # The Magic: The Gathering Online card ID
  mtgoId: String

  # A universal unique ID generated by MTGJSON. Each entry is unique. Entries are for MTGJSON v4 uuid generation
  mtgJsonV4Id: String!

  # An string cards have which Wizards of the Coast uses as a card identifier
  multiverseId: String

  # A universal unique ID generated by Scryfall. Note that cards with multiple faces are not unique
  scryfallId: String!

  # A unique ID for this card's oracle identity. This value is consistent across reprinted card editions, and unique among different cards with the same name (tokens, Unstable variants, etc)
  scryfallOracleId: String

  # A unique identifier for the card artwork that remains consistent across reprints. Newly spoiled cards may not have this field yet
  scryfallIllustrationId: String

  # The TCG Player card ID
  tcgplayerProductId: String

  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  card: Card @belongsTo(fields: ["uuid"])
}

type Rulings @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  date: AWSDateTime
  text: String
  cardUuid: ID! @index(name: "byCard")
  card: Card @belongsTo(fields: ["cardUuid"])
}

type CardsOwned @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  condition: CardCondition!
  addedOn: AWSDateTime
  soldOn: AWSDateTime
  isFoil: Boolean
  initialValue: Float!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  ownerUuid: ID! @index(name: "byOwner")
  addedByUuid: ID! @index(name: "byAddedBy")
  cardUuid: ID! @index(name: "byCard")
  card: Card @belongsTo(fields: ["cardUuid"])
  owner: Person @belongsTo(fields: ["ownerUuid"])
  addedBy: Person @belongsTo(fields: ["addedByUuid"])
}

type Person @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  name: String
  cardsOwned: [CardsOwned] @hasMany(indexName: "byOwner", fields: ["id"])
  cardsAddedBy: [CardsOwned] @hasMany(indexName: "byAddedBy", fields: ["id"])
}

type Set @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey

  # Number of cards in the set. Will default to totalSetSize if not available. Note that Wizards sometimes prints extra cards beyond the set size into promos or supplemental products.
  baseSetSize: Float

  # Block name the set was in
  block: String

  # Set code for the set
  code: ID! @index(name: "bySetCode")

  # Alternate set code Wizards uses for a select few duel deck sets.
  codeV3: String

  # If this set is available only outside the United States
  isForeignOnly: Boolean

  # If this set is only available in foil
  isFoilOnly: Boolean

  # If this set is only available in non-foil
  isNonFoilOnly: Boolean

  # If this set is only available in Magic: The Gathering Online
  isOnlineOnly: Boolean

  # If this set is only available in paper
  isPaperOnly: Boolean

  # If this set is still in preview (spoiled). Preview sets do not have complete data.
  isPartialPreview: Boolean

  # The matching keyrune code for Keyrune image icons
  keyruneCode: String

  # The Magic Card Market set name
  mcmName: String

  # The Magic Card Market set ID
  mcmId: Float

  # Set code for the set as it appears on Magic: The Gathering Online.
  mtgoCode: String

  # Name of the set.
  name: String

  # The parent set code for set variations like promotions, guild kits, etc
  parentCode: String

  # Release date in ISO 8601 format for the set
  releaseDate: String

  # Group ID of the set on TCGPlayer
  tcgplayerGroupId: Float

  # Total number of cards in the set, including promos and related supplemental products
  totalSetSize: Float

  # Expansion type of the set
  type: String

  cards: [Card] @hasMany(indexName: "bySetCode", fields: ["code"])
  setBoosterContents: [SetBoosterContent] @hasMany(indexName: "bySetCode", fields: ["code"])
  setBoosterContentWeights: [SetBoosterContentWeight] @hasMany(indexName: "bySetCode", fields: ["code"])
  setBoosterSheets: [SetBoosterSheet] @hasMany(indexName: "bySetCode", fields: ["code"])
  setBoosterSheetCards: [SetBoosterSheetCard] @hasMany(indexName: "bySetCode", fields: ["code"])
  tokens: [CardToken] @hasMany(indexName: "bySetCode", fields: ["code"])
  translations: Translations @hasOne(fields: ["code"])
}

type SetBoosterContent @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  boosterIndex: Int
  boosterName: String
  setCode: ID! @index(name: "bySetCode")
  sheetName: String
  sheetPicks: Int
}

type SetBoosterContentWeight @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  boosterIndex: Int
  boosterName: String
  boosterWeight: Int
  setCode: ID! @index(name: "bySetCode")
}

type SetBoosterSheet @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  boosterName: String
  setCode: ID! @index(name: "bySetCode")
  sheetHasBalanceColors: Boolean
  sheetIsFoil: Boolean
  sheetName: String
}

type SetBoosterSheetCard @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  boosterName: String
  cardUuid: ID!
  cardWeight: Int
  setCode: ID! @index(name: "bySetCode")
  sheetName: String
}

type CardToken @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  # Name of the artist that illustrated the card art
  artist: String

  # The ASCII (Basic/128) code formatted card name with no special unicode characters
  asciiName: String

  # List of the card's available printing types
  availability: [String!]

  # Color of the card border
  borderColor: String

  # List of the colors found in manaCost, colorIndicator, and text
  colorIdentity: [String!]

  # List of all the colors in the color indicator (The symbol prefixed to a card's types)
  colorIndicator: [String!]

  # List of all colors in manaCost, colorIndicator. Some cards may not have a value, such as cards with 'Devoid' in its text
  colors: [String!]

  # Card rank on EDHRec
  edhrecRank: Float

  # Name on the face of the card
  faceName: String

  # Italicized text found below the rules text that has no game function
  flavorText: String

  # The visual frame effect
  frameEffects: [String!]

  # Version of the card frame style
  frameVersion: String

  # If the card be found in foil
  hasFoil: Boolean

  # If the card can be found in non-foil
  hasNonFoil: Boolean
  identifiers: Identifier

  # If the card has full artwork
  isFullArt: Boolean

  # If the card is only available in Magic: The Gathering Online
  isOnlineOnly: Boolean

  # If the card is promotional
  isPromo: Boolean

  # If the card has been reprinted
  isReprint: Boolean

  # All keywords found on a card
  keywords: [String!]

  # Type of card layout
  layout: String

  # Planeswalker loyalty value
  loyalty: String

  # Names of each face on the card. Card with multiple faces, like 'Split' and 'Meld' cards are given as delimiter. Example: Face 1 Name // Face 2 Name
  name: String

  # Number of the card. Can be prefixed or suffixed with a * or other characters for promo sets
  number: String

  # Power of the card
  power: String

  # List of promotional types for a card
  promoTypes: [String!]

  # The names of the cards that product this card
  reverseRelated: [String!]

  # The set code that the card is from
  setCode: ID! @index(name: "bySetCode")

  # Identifier of the card side. Used on cards with multiple faces
  side: String

  # List of card subtypes found after em-dash
  subTypes: [String!]

  # Rules text of the card
  text: String

  # Toughness of the card
  toughness: String

  # Type of the card as visible, including any supertypes and subtypes
  type: String

  # List of all 'card types' of the card, including Un-sets and gameplay variants
  types: [String!]

  # A universal unique ID (v5) generated by MTGJSON. Each entry is unique
  uuid: ID! @index(name: "byTokenUuid")

  # Name of the watermark on the card
  watermark: String
  identifier: TokenIdentifier @hasOne(fields: ["uuid"])
  set: Set @belongsTo(fields: ["setCode"])
}

type Translations @model @auth(rules: [{ allow: public }]) {
  AncientGreek: String
  Arabic: String
  ChineseSimplified: String
  ChineseTraditional: String
  French: String
  German: String
  Hebrew: String
  Italian: String
  Japanese: String
  Korean: String
  Latin: String
  Phyrexian: String
  PortugueseBrazil: String
  Russian: String
  Sanskrit: String
  Spanish: String
  setCode: ID! @index(name: "bySetCode")
  set: Set @belongsTo(fields: ["setCode"])
}

type TokenIdentifier @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  cardKingdomEtchedId: String
  cardKingdomFoilId: String
  cardKingdomId: String
  cardSphereId: String
  mcmId: String
  mcmMetaId: String
  mtgArenaId: String
  mtgJsonFoilVersionId: String
  mtgJsonNonFoilVersionId: String
  mtgJsonv4Id: String
  mtgoFoilId: String
  mtgoId: String
  multiverseId: String
  scryfallId: String
  scryfallIllustrationId: String
  scryfallOracleId: String
  tcgplayerEtchedProductId: String
  tcgplayerProductId: String
  tokenUuid: ID! @index(name: "byTokenUuid")
  token: CardToken @belongsTo(fields: ["tokenUuid"])
}

input BatchCreateCard {
  uuid: ID!
  artist: String
  asciiName: String
  availability: [String!]
  borderColor: String
  colorIdentity: [String!]
  colorIndicator: [String!]
  colors: [String!]
  convertedManaCost: Float
  count: Float
  duelDeck: String
  edhrecRank: Float
  faceConvertedManaCost: Float
  faceName: String
  flavorName: String
  flavorText: String
  frameEffects: [String!]
  frameVersion: String
  hand: String
  hasContentWarning: Boolean
  hasFoil: Boolean
  hasAlternativeDeckLimit: Boolean
  hasNonFoil: Boolean
  isAlternative: Boolean
  isFoil: Boolean
  isFullArt: Boolean
  isOnlineOnly: Boolean
  isOversized: Boolean
  isPromo: Boolean
  isReprint: Boolean
  isReserved: Boolean
  isStarter: Boolean
  isStorySpotlight: Boolean
  isTextless: Boolean
  isTimeshifted: Boolean
  keywords: [String!]
  layout: String
  life: String
  loyalty: String
  manaCost: String
  name: String
  number: String
  originalText: String
  originalType: String
  otherFaceIds: [String!]
  power: String
  printings: [String!]
  promoTypes: [String!]
  rarity: String
  setCode: ID!
  side: String
  subTypes: [String!]
  superTypes: [String!]
  text: String
  toughness: String
  type: String
  types: [String!]
  variation: [String!]
  watermark: String
}

input IdentifierInput {
  uuid: ID!
  cardKingdomFoilId: String
  cardKingdomId: String
  mcmId: String
  mcmMetaId: String
  mtgArenaId: String
  mtgoFoilId: String
  mtgoId: String
  mtgJsonV4Id: String!
  multiverseId: String
  scryfallId: String!
  scryfallOracleId: String
  scryfallIllustrationId: String
  tcgplayerProductId: String
}

type Mutation {
  batchCreateCards(cards: [BatchCreateCard]): [Card] @function(name: "batchCreateCards")
  batchCreateIdentifiers(identifiers: [IdentifierInput]): [Identifier] @function(name: "batchCreateIdentifiers")
}
